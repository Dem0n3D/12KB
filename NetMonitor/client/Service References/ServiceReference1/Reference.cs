//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DoWork", ReplyAction="http://tempuri.org/IService1/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DoWork", ReplyAction="http://tempuri.org/IService1/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CleanJournal", ReplyAction="http://tempuri.org/IService1/CleanJournalResponse")]
        void CleanJournal();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CleanJournal", ReplyAction="http://tempuri.org/IService1/CleanJournalResponse")]
        System.Threading.Tasks.Task CleanJournalAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ReadLogins", ReplyAction="http://tempuri.org/IService1/ReadLoginsResponse")]
        string ReadLogins();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ReadLogins", ReplyAction="http://tempuri.org/IService1/ReadLoginsResponse")]
        System.Threading.Tasks.Task<string> ReadLoginsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsStart", ReplyAction="http://tempuri.org/IService1/IsStartResponse")]
        bool IsStart(string users, string login, string password, int mode, string path, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsStart", ReplyAction="http://tempuri.org/IService1/IsStartResponse")]
        System.Threading.Tasks.Task<bool> IsStartAsync(string users, string login, string password, int mode, string path, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteToJournal", ReplyAction="http://tempuri.org/IService1/WriteToJournalResponse")]
        void WriteToJournal(string a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteToJournal", ReplyAction="http://tempuri.org/IService1/WriteToJournalResponse")]
        System.Threading.Tasks.Task WriteToJournalAsync(string a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddInInput", ReplyAction="http://tempuri.org/IService1/AddInInputResponse")]
        void AddInInput(string a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddInInput", ReplyAction="http://tempuri.org/IService1/AddInInputResponse")]
        System.Threading.Tasks.Task AddInInputAsync(string a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsRegistration", ReplyAction="http://tempuri.org/IService1/IsRegistrationResponse")]
        bool IsRegistration(string users, string login, string password, int mode, string path, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsRegistration", ReplyAction="http://tempuri.org/IService1/IsRegistrationResponse")]
        System.Threading.Tasks.Task<bool> IsRegistrationAsync(string users, string login, string password, int mode, string path, string user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : client.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<client.ServiceReference1.IService1>, client.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public void CleanJournal() {
            base.Channel.CleanJournal();
        }
        
        public System.Threading.Tasks.Task CleanJournalAsync() {
            return base.Channel.CleanJournalAsync();
        }
        
        public string ReadLogins() {
            return base.Channel.ReadLogins();
        }
        
        public System.Threading.Tasks.Task<string> ReadLoginsAsync() {
            return base.Channel.ReadLoginsAsync();
        }
        
        public bool IsStart(string users, string login, string password, int mode, string path, string user) {
            return base.Channel.IsStart(users, login, password, mode, path, user);
        }
        
        public System.Threading.Tasks.Task<bool> IsStartAsync(string users, string login, string password, int mode, string path, string user) {
            return base.Channel.IsStartAsync(users, login, password, mode, path, user);
        }
        
        public void WriteToJournal(string a) {
            base.Channel.WriteToJournal(a);
        }
        
        public System.Threading.Tasks.Task WriteToJournalAsync(string a) {
            return base.Channel.WriteToJournalAsync(a);
        }
        
        public void AddInInput(string a) {
            base.Channel.AddInInput(a);
        }
        
        public System.Threading.Tasks.Task AddInInputAsync(string a) {
            return base.Channel.AddInInputAsync(a);
        }
        
        public bool IsRegistration(string users, string login, string password, int mode, string path, string user) {
            return base.Channel.IsRegistration(users, login, password, mode, path, user);
        }
        
        public System.Threading.Tasks.Task<bool> IsRegistrationAsync(string users, string login, string password, int mode, string path, string user) {
            return base.Channel.IsRegistrationAsync(users, login, password, mode, path, user);
        }
    }
}
